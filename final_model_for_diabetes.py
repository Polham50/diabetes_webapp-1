# -*- coding: utf-8 -*-
"""Final Model for Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LF3Bm6CIll3b_JrwTBHnWW_6flOUoHzG
"""

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score
from sklearn.impute import SimpleImputer
from xgboost import XGBClassifier
from imblearn.over_sampling import SMOTE
import joblib
import os

# Create models directory
os.makedirs('models', exist_ok=True)

# Load dataset
data = pd.read_csv('diabetes.csv')  # Update path, e.g., 'C:/path/to/diabetes.csv'

# Drop Insulin and SkinThickness early
data = data.drop(['Insulin', 'SkinThickness'], axis=1)

# Preprocessing
zero_cols = ['Glucose', 'BloodPressure', 'BMI']  # Only impute relevant columns
for col in zero_cols:
    data[col] = data[col].replace(0, np.nan)
imputer = SimpleImputer(strategy='median')
data[zero_cols] = imputer.fit_transform(data[zero_cols])

# Feature engineering
data['Glucose_BMI'] = data['Glucose'] * data['BMI']

# Features
selected_features = ['Glucose', 'BMI', 'Pregnancies', 'Age', 'BloodPressure', 'DiabetesPedigreeFunction', 'Glucose_BMI']
X = data[selected_features]
y = data['Outcome']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Apply SMOTE
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

# Scale features
scaler = StandardScaler()
X_train_res = scaler.fit_transform(X_train_res)
X_test = scaler.transform(X_test)

# Train XGBoost model
scale_pos_weight = (y_train == 0).sum() / (y_train == 1).sum()
best_xgb = XGBClassifier(
    learning_rate=0.01,
    max_depth=3,
    n_estimators=100,
    subsample=0.8,
    colsample_bytree=0.8,
    reg_alpha=0.2,
    reg_lambda=1.0,
    scale_pos_weight=scale_pos_weight,
    random_state=42,
    eval_metric='logloss'
)
best_xgb.fit(X_train_res, y_train_res)

# Evaluate
y_pred = best_xgb.predict(X_test)
print("XGBoost Accuracy:", accuracy_score(y_test, y_pred))
print("XGBoost ROC-AUC Score:", roc_auc_score(y_test, y_pred))
print("XGBoost Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("XGBoost Classification Report:\n", classification_report(y_test, y_pred))

# Cross-validation for recall
cv_scores = cross_val_score(best_xgb, X_train_res, y_train_res, cv=StratifiedKFold(5, shuffle=True, random_state=42), scoring='recall')
print("Stratified CV Recall Scores:", cv_scores)
print("Mean CV Recall:", cv_scores.mean(), "Â±", cv_scores.std())

# Feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x=best_xgb.feature_importances_, y=selected_features)
plt.title('Feature Importance (XGBoost)')
plt.show()

# Save model, scaler, imputer
joblib.dump(best_xgb, 'models/diabetes_model_final.pkl')
joblib.dump(scaler, 'models/scaler.pkl')
joblib.dump(imputer, 'models/imputer.pkl')
print("Saved: models/diabetes_model_final.pkl, models/scaler.pkl, models/imputer.pkl")

# Verify saved files
print("Files in models directory:", os.listdir('models'))



# Load model, scaler, imputer
model = joblib.load('models/diabetes_model_final.pkl')
scaler = joblib.load('models/scaler.pkl')
imputer = joblib.load('models/imputer.pkl')

# Example patient data
patient_data = pd.DataFrame({
    'Glucose': [140],
    'BMI': [35],
    'Pregnancies': [3],
    'Age': [29],
    'BloodPressure': [80],
    'DiabetesPedigreeFunction': [0.5],
    'Glucose_BMI': [140 * 35]
})

# Impute missing values
zero_cols = ['Glucose', 'BloodPressure', 'BMI']
patient_data[zero_cols] = imputer.transform(patient_data[zero_cols])

# Scale features
patient_data_scaled = scaler.transform(patient_data)

# Predict with threshold 0.5
probability = model.predict_proba(patient_data_scaled)[:, 1]
prediction = 1 if probability >= 0.5 else 0
print("Prediction (0 = No Diabetes, 1 = Diabetes):", prediction)
print("Diabetes Probability:", probability[0])